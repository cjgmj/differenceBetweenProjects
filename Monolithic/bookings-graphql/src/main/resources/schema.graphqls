type Query  {
	findAllUsers: [User!]
	findUsersPaginated(page: Int, size: Int): UserPaged!
	findUserById(userId: Int!): User!
	findUsersFilteredByName(name: String!): [User!]
	findUsersOrderedByName: [User!]
	findUserFilteredByAge(age: Int!): [User!]
	findAllRooms: [Room!]
	findBookingsByRoom(roomId: Int!): [Booking!]
	findBookingsBetweenDates(from: LocalDate!, to: LocalDate!): [Booking!]
	findBookingsByUser(name: String!, surname: String!): [Booking!]
	findBookingsByReasonNull: [Booking!]
	findBookingsAfterDate(date: LocalDate!): [Booking!]
	findBookingsAccepted: [Booking!]
}

type Mutation {
	addUser(userInput: UserInput!): User!
	updateUser(userId: Int!, userInput: UserInput!): User!
	deleteUser(userId: Int!): User!
	bookingRoom(bookingInput: BookingInput!): Booking!
}

scalar LocalDate
scalar LocalDateTime

type Room {
	id: ID!
	name: String!
	number: String!
	place: String!
}

type User {
	id: ID!
	name: String!
	surname: String!
	email: String!
	birthdate: LocalDate
	age: Int!
}

type UserPaged {
	content: [User!]
	pageable: PageRequest!
	total: Int!
}

type Booking {
	id: ID!
	user: User!
	room: Room!
	date: LocalDateTime!
	reason: String
	accepted: Boolean!
	booking: LocalDateTime!
}

type PageRequest {
	page: Int!
	size: Int!
	sort: Sort
}

type Sort {
	orders: [Order]
}

type Order {
	direction: String
	property: String!
}

input UserInput {
	name: String!
	surname: String!
	email: String!
	birthdate: LocalDate!
	age: Int!
}

input BookingInput {
	userId: Int!
	roomId: Int!
	date: LocalDateTime!
	reason: String!
	accepted: Boolean
}
